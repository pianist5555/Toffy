{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\piani\\\\Documents\\\\GitHub\\\\Toffyy_frontend\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\piani\\\\Documents\\\\GitHub\\\\Toffyy_frontend\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import{startLoading,finishLoading}from'../modules/loading.js';export default function createRequestThunk(type,request){// 성공 및 실패 액션 타입 정의\nvar SUCCESS=\"\".concat(type,\"_SUCCESS\");var FAILURE=\"\".concat(type,\"_FAILURE\");return function(params){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:type});// GET_POST or GET_USERS 타입의 리듀서 함수를 실행시키려는 것\ndispatch(startLoading(type));_context.prev=2;_context.next=5;return request(params);case 5:response=_context.sent;// api에서 받아온 객체를 response에 담음\ndispatch({type:SUCCESS,// 오류가 없다면 GET_POST_SUCCESS or GET_USERS_SUCCESS로 리턴하게 됨\npayload:response.data});// payload(파라미터) 를 api 데이터로 넣어서 리턴함\ndispatch(finishLoading(type));_context.next=15;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](2);dispatch({type:FAILURE,payload:_context.t0,error:true});//에러 발생시\ndispatch(startLoading(type));throw _context.t0;case 15:case\"end\":return _context.stop();}}},_callee,null,[[2,10]]);}));return function(_x){return _ref.apply(this,arguments);};}();};}","map":{"version":3,"sources":["C:/Users/piani/Documents/GitHub/Toffyy_frontend/frontend/src/lib/createRequestThunk.js"],"names":["startLoading","finishLoading","createRequestThunk","type","request","SUCCESS","FAILURE","params","dispatch","response","payload","data","error"],"mappings":"iXAAA,OAASA,YAAT,CAAuBC,aAAvB,KAA4C,uBAA5C,CAEA,cAAe,SAASC,CAAAA,kBAAT,CAA4BC,IAA5B,CAAkCC,OAAlC,CAA2C,CACtD;AACA,GAAMC,CAAAA,OAAO,WAAMF,IAAN,YAAb,CACA,GAAMG,CAAAA,OAAO,WAAMH,IAAN,YAAb,CACA,MAAO,UAAAI,MAAM,iGAAI,iBAAMC,QAAN,+HACbA,QAAQ,CAAC,CAAEL,IAAI,CAAJA,IAAF,CAAD,CAAR,CAAoB;AACpBK,QAAQ,CAACR,YAAY,CAACG,IAAD,CAAb,CAAR,CAFa,sCAIcC,CAAAA,OAAO,CAACG,MAAD,CAJrB,QAIHE,QAJG,eAI+B;AACxCD,QAAQ,CAAC,CACLL,IAAI,CAAGE,OADF,CACW;AAChBK,OAAO,CAAED,QAAQ,CAACE,IAFb,CAAD,CAAR,CAGI;AACJH,QAAQ,CAACP,aAAa,CAACE,IAAD,CAAd,CAAR,CATS,iFAWTK,QAAQ,CAAC,CACLL,IAAI,CAAEG,OADD,CAELI,OAAO,YAFF,CAGLE,KAAK,CAAG,IAHH,CAAD,CAAR,CAII;AACJJ,QAAQ,CAACR,YAAY,CAACG,IAAD,CAAb,CAAR,CAhBS,uFAAJ,gEAAb,CAoBH","sourcesContent":["import { startLoading, finishLoading } from '../modules/loading.js';\r\n\r\nexport default function createRequestThunk(type, request) {\r\n    // 성공 및 실패 액션 타입 정의\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n    return params => async dispatch => {\r\n        dispatch({ type }); // GET_POST or GET_USERS 타입의 리듀서 함수를 실행시키려는 것\r\n        dispatch(startLoading(type));\r\n        try{\r\n            const response = await request(params); // api에서 받아온 객체를 response에 담음\r\n            dispatch({\r\n                type : SUCCESS, // 오류가 없다면 GET_POST_SUCCESS or GET_USERS_SUCCESS로 리턴하게 됨\r\n                payload: response.data\r\n            }); // payload(파라미터) 를 api 데이터로 넣어서 리턴함\r\n            dispatch(finishLoading(type));\r\n        } catch (e) {\r\n            dispatch({\r\n                type: FAILURE,\r\n                payload : e,\r\n                error : true\r\n            }); //에러 발생시\r\n            dispatch(startLoading(type));\r\n            throw e;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}