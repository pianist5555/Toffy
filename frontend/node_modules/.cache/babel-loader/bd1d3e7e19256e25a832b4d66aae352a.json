{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\piani\\\\Documents\\\\GitHub\\\\Toffy_frontend_R\\\\Toffy\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\piani\\\\Documents\\\\GitHub\\\\Toffy_frontend_R\\\\Toffy\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\piani\\\\Documents\\\\GitHub\\\\Toffy_frontend_R\\\\Toffy\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\piani\\\\Documents\\\\GitHub\\\\Toffy_frontend_R\\\\Toffy\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import TextItem from\"../TextItem\";import axios from\"axios\";axios.defaults.xsrfCookieName=\"csrftoken\";axios.defaults.xsrfHeaderName=\"X-CSRFToken\";var Test=/*#__PURE__*/function(_Component){_inherits(Test,_Component);var _super=_createSuper(Test);function Test(){var _this;_classCallCheck(this,Test);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={value:\"\",textList:[]};_this._handleChange=function(event){_this.setState({value:event.target.value});};_this._handleSubmit=function(){var value=_this.state.value;axios.post(\"/api/wisesaying/\",{text:value}).then(function(res){return _this._renderText();});};_this._renderText=function(){axios// Restframework에서 json으로 보여주는 페이지 url을 get 방식으로 접근\n.get(\"/api/wisesaying/\").then(function(res){return _this.setState({textList:res.data});})// res에 데이터들이 담겨짐, state의 textList에 res의 데이터를 저장\n.catch(function(err){return console.log(err);});};_this._deleteText=function(id){axios.delete(\"/api/wisesaying/\".concat(id)).then(function(res){return _this._renderText();});};return _this;}_createClass(Test,[{key:\"componentDidMount\",// 1.렌더링 하기전 _renderText() 함수를 호출\nvalue:function componentDidMount(){this._renderText();}},{key:\"render\",value:function render(){var _this2=this;var textList=this.state.textList;return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"h1\",null,\"OneLine App\"),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"label\",null,\"Text:\",/*#__PURE__*/React.createElement(\"input\",{type:\"text\",value:this.state.value,onChange:this._handleChange})),/*#__PURE__*/React.createElement(\"button\",{onClick:this._handleSubmit},\"submit\")),/*#__PURE__*/React.createElement(\"h2\",null,\"Long Text\"),textList.map(function(text,index){return/*#__PURE__*/React.createElement(TextItem,{text:text.text,key:index,id:text.id,handleClick:_this2._deleteText});}));}}]);return Test;}(Component);export default Test;","map":{"version":3,"sources":["C:/Users/piani/Documents/GitHub/Toffy_frontend_R/Toffy/frontend/src/pages/Test.js"],"names":["React","Component","TextItem","axios","defaults","xsrfCookieName","xsrfHeaderName","Test","state","value","textList","_handleChange","event","setState","target","_handleSubmit","post","text","then","res","_renderText","get","data","catch","err","console","log","_deleteText","id","delete","map","index"],"mappings":"wvBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEAA,KAAK,CAACC,QAAN,CAAeC,cAAf,CAAgC,WAAhC,CACAF,KAAK,CAACC,QAAN,CAAeE,cAAf,CAAgC,aAAhC,C,GAEMC,CAAAA,I,mTACJC,K,CAAQ,CACNC,KAAK,CAAE,EADD,CAENC,QAAQ,CAAE,EAFJ,C,OAyCRC,a,CAAgB,SAAAC,KAAK,CAAI,CACvB,MAAKC,QAAL,CAAc,CAAEJ,KAAK,CAAEG,KAAK,CAACE,MAAN,CAAaL,KAAtB,CAAd,EACD,C,OACDM,a,CAAgB,UAAM,IACZN,CAAAA,KADY,CACF,MAAKD,KADH,CACZC,KADY,CAEpBN,KAAK,CACFa,IADH,CACQ,kBADR,CAC4B,CAAEC,IAAI,CAAER,KAAR,CAD5B,EAEGS,IAFH,CAEQ,SAAAC,GAAG,QAAI,OAAKC,WAAL,EAAJ,EAFX,EAGD,C,OAEDA,W,CAAc,UAAM,CAClBjB,KACA;AADK,CAEFkB,GAFH,CAEO,kBAFP,EAGGH,IAHH,CAGQ,SAAAC,GAAG,QAAI,OAAKN,QAAL,CAAc,CAAEH,QAAQ,CAAES,GAAG,CAACG,IAAhB,CAAd,CAAJ,EAHX,CAGsD;AAHtD,CAIGC,KAJH,CAIS,SAAAC,GAAG,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ,EAJZ,EAKD,C,OACDG,W,CAAc,SAAAC,EAAE,CAAI,CAClBzB,KAAK,CAAC0B,MAAN,2BAAgCD,EAAhC,GAAsCV,IAAtC,CAA2C,SAAAC,GAAG,QAAI,OAAKC,WAAL,EAAJ,EAA9C,EACD,C,2DAvDD;kCACoB,CAClB,KAAKA,WAAL,GACD,C,uCACQ,oBACCV,CAAAA,QADD,CACc,KAAKF,KADnB,CACCE,QADD,CAEP,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,4CADF,cAEE,4CACE,sDAEE,6BACE,IAAI,CAAC,MADP,CAEE,KAAK,CAAE,KAAKF,KAAL,CAAWC,KAFpB,CAGE,QAAQ,CAAE,KAAKE,aAHjB,EAFF,CADF,cASE,8BAAQ,OAAO,CAAE,KAAKI,aAAtB,WATF,CAFF,cAaE,0CAbF,CAgBGL,QAAQ,CAACoB,GAAT,CAAa,SAACb,IAAD,CAAOc,KAAP,CAAiB,CAC7B,mBACE,oBAAC,QAAD,EACE,IAAI,CAAEd,IAAI,CAACA,IADb,CAEE,GAAG,CAAEc,KAFP,CAGE,EAAE,CAAEd,IAAI,CAACW,EAHX,CAIE,WAAW,CAAE,MAAI,CAACD,WAJpB,EADF,CAQD,CATA,CAhBH,CADF,CA6BD,C,kBAzCgB1B,S,EAgEnB,cAAeM,CAAAA,IAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport TextItem from \"../TextItem\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.xsrfCookieName = \"csrftoken\";\r\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\r\n\r\nclass Test extends Component {\r\n  state = {\r\n    value: \"\",\r\n    textList: []\r\n  };\r\n\r\n  // 1.렌더링 하기전 _renderText() 함수를 호출\r\n  componentDidMount() {\r\n    this._renderText();\r\n  }\r\n  render() {\r\n    const { textList } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>OneLine App</h1>\r\n        <div>\r\n          <label>\r\n            Text:\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.value}\r\n              onChange={this._handleChange}\r\n            />\r\n          </label>\r\n          <button onClick={this._handleSubmit}>submit</button>\r\n        </div>\r\n        <h2>Long Text</h2>\r\n        {/* 3. state에 담긴 textList에서 Data(파라미터가 text로 표현되어있음)를 있는대로 \r\n            다꺼내서 화면에 return (index는 자동으로 지정됨) */}\r\n        {textList.map((text, index) => {\r\n          return (\r\n            <TextItem\r\n              text={text.text}\r\n              key={index}\r\n              id={text.id}\r\n              handleClick={this._deleteText}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  _handleChange = event => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n  _handleSubmit = () => {\r\n    const { value } = this.state;\r\n    axios\r\n      .post(\"/api/wisesaying/\", { text: value })\r\n      .then(res => this._renderText());\r\n  };\r\n  // 2. 호출된 _renderText 함수는 장고 Model에 있는 Data를 Json으로 보여주는 페이지에서 Data를 가져와 SetState해줌\r\n  _renderText = () => {\r\n    axios\r\n    // Restframework에서 json으로 보여주는 페이지 url을 get 방식으로 접근\r\n      .get(\"/api/wisesaying/\")\r\n      .then(res => this.setState({ textList: res.data })) // res에 데이터들이 담겨짐, state의 textList에 res의 데이터를 저장\r\n      .catch(err => console.log(err));\r\n  };\r\n  _deleteText = id => {\r\n    axios.delete(`/api/wisesaying/${id}`).then(res => this._renderText());\r\n  };\r\n}\r\n\r\nexport default Test;\r\n"]},"metadata":{},"sourceType":"module"}